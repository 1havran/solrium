% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/create_json.R
\name{update_json}
\alias{update_json}
\title{Update documents using JSON}
\usage{
update_json(files, commit = TRUE, wt = "json", verbose = TRUE,
  raw = FALSE, base = "http://localhost:8983", ...)
}
\arguments{
\item{files}{Path to file to load into Solr}

\item{commit}{(logical) If \code{TRUE}, documents immediately searchable. Deafult: TRUE}

\item{wt}{(character) One of json (default) or xml. If json, uses
\code{\link[jsonlite]{fromJSON}} to parse. If xml, uses \code{\link[XML]{xmlParse}} to parse}

\item{verbose}{If TRUE (default) the url call used printed to console.}

\item{raw}{(logical) If TRUE, returns raw data in format specified by wt param}

\item{base}{(character) URL endpoint. This is different from the other functions in that we aren't
hitting a search endpoint. Pass in here}

\item{...}{curl options passed on to \code{\link[httr]{GET}}}
}
\description{
Update documents using JSON
}
\details{
You likely may not be able to run this function against many public Solr
services, but should work locally.
}
\examples{
\dontrun{
# Add documents
file <- system.file("examples", "books2.json", package = "solr")
update_json(file)

# Update commands - can include many varying commands
## Add file
file <- system.file("examples", "updatecommands_add.json", package = "solr")
update_json(file)

## Delete file
file <- system.file("examples", "updatecommands_delete.json", package = "solr")
update_json(file)
}
}
\seealso{
Other update: \code{\link{update_csv}};
  \code{\link{update_xml}}
}

